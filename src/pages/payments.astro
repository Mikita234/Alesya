---
import Layout from '../layouts/Layout.astro';

const title = "Оплата услуг психолога | Алеся Такун";
const description = "Оплата услуг психолога Алеси Такун. Очный приём и онлайн‑консультации. Банковские карты и перевод. Подтверждение в Telegram @alesiatakun";
---

<Layout title={title} description={description}>
	<h1>Оплата услуг</h1>
	
	<div class="service-info">
		<h2>Что вы покупаете</h2>
		<ul>
			<li>Индивидуальная консультация (50 мин, онлайн/офлайн).</li>
			<li>Онлайн-сессия (50 мин).</li>
			<li>Психологические группы (180 мин, по расписанию).</li>
		</ul>
		<p class="service-disclaimer">Услуги не являются психотерапевтической и/или психиатрической помощью.</p>
	</div>
	
	<div class="process-info">
		<h2>Как получить услугу</h2>
		<ol>
			<li>Вы оплачиваете через сайт (Visa/MasterCard/Белкарт, Apple Pay; поддерживаются 3-D Secure и Белкарт-Интернет-Пароль).</li>
			<li>Получаете подтверждение на e-mail.</li>
			<li>Связываетесь со мной в телеграм @alesiatakun для выбора времени (или дождитесь предложения времени).</li>
			<li>Проведение встречи онлайн (Google Meet/Zoom/Telegram) или офлайн по договорённости.</li>
		</ol>
	</div>
	
	<div class="payment-security">
		<p>Оплата через ЗАО «Альфа-Банк», данные карты вводятся на защищённой странице банка, поддержка 3-D Secure/Белкарт-Интернет-Пароль.</p>
	</div>
	
	<p>Выберите удобную для вас сумму и способ оплаты. После оплаты отправьте подтверждение в Telegram: <a href="https://t.me/alesiatakun" target="_blank">@alesiatakun</a></p>

	<div class="payment-main">
		<h2>Свободный платёж</h2>
		<p>Введите любую сумму, которая вам подходит. Стандартная стоимость консультации — 150 BYN</p>
		
		<form class="free-payment" id="payment-form">
			<div class="amount-input">
				<label for="amount-input">Сумма (BYN)</label>
				<input type="number" min="1" step="1" required placeholder="Введите сумму" id="amount-input" aria-describedby="amount-help" />
				<small id="amount-help" class="input-help">Минимальная сумма: 1 BYN</small>
			</div>
			<div class="consent">
				<label class="consent-label">
					<input type="checkbox" id="consent-checkbox" required />
					<span>Я соглашаюсь с <a href="/oferta/" target="_blank">договором оферты</a> и <a href="/privacy/" target="_blank">политикой конфиденциальности</a></span>
				</label>
			</div>
			<button class="btn btn-large" type="submit">Оплатить</button>
		</form>
		
		<div class="quick-payments">
			<h3>Быстрые суммы</h3>
			<p class="quick-payments-hint">Выберите готовую сумму или введите свою</p>
			<div class="quick-buttons">
				<button type="button" class="btn-quick" data-amount="85" aria-label="Выбрать сумму 85 BYN">85 BYN</button>
				<button type="button" class="btn-quick" data-amount="90" aria-label="Выбрать сумму 90 BYN">90 BYN</button>
				<button type="button" class="btn-quick" data-amount="100" aria-label="Выбрать сумму 100 BYN">100 BYN</button>
				<button type="button" class="btn-quick" data-amount="120" aria-label="Выбрать сумму 120 BYN">120 BYN</button>
				<button type="button" class="btn-quick" data-amount="150" aria-label="Выбрать сумму 150 BYN">150 BYN</button>
				<button type="button" class="btn-quick" data-amount="480" aria-label="Выбрать пакет 4 сессии за 480 BYN">4 сессии (480 BYN)</button>
				<button type="button" class="btn-quick" data-amount="960" aria-label="Выбрать пакет 8 сессий за 960 BYN">8 сессий (960 BYN)</button>
			</div>
		</div>
	</div>

    <div class="service-reference">
        <h3>Справочно: стандартные тарифы</h3>
        <ul class="service-list price-list">
            <li>
                <span class="label">Индивидуальная консультация</span>
                <span class="price">150 BYN</span>
            </li>
            <li>
                <span class="label">Онлайн-сессия</span>
                <span class="price">150 BYN</span>
            </li>
            <li>
                <span class="label">Психологические группы</span>
                <span class="price">100 BYN</span>
            </li>
        </ul>
    </div>

	<div class="service-types">
		<h4>Безопасность платежей</h4>
		<p>Оплата осуществляется через защищенную платежную систему ЗАО «Альфа-Банк». Все данные карты вводятся на защищенной странице банка. Поддерживаются технологии 3-D Secure и Белкарт Интернет-Пароль для дополнительной защиты.</p>
		<p>Мы не храним и не обрабатываем данные вашей банковской карты. Все платежи проходят через сертифицированную платежную систему в соответствии с международными стандартами безопасности.</p>
	</div>

	

	<h2>Банковский перевод</h2>
	<p>Получатель: ИП Такун Алеся Александровна</p>
	<p>IBAN: <strong>BY80ALFA30132H53520010270000</strong></p>
	<p class="muted">Провайдер: Альфа-Банк (Беларусь)</p>
	
	<div class="payment-notice">
		<p><strong>Важно:</strong> После оплаты банковским переводом отправьте подтверждение в Telegram: <a href="https://t.me/alesiatakun" target="_blank">@alesiatakun</a></p>
	</div>
	
	<p class="muted">Ознакомьтесь с <a href="/oferta">договором оферты</a> перед оплатой.</p>
</Layout>

<style>
.service-info, .process-info {
    background: transparent;
    padding: 0;
    border: 0;
    margin: 24px 0;
    max-width: 100%;
}

.service-info h2, .process-info h2 {
    font-size: 1.5rem;
    font-weight: 600;
    margin: 0 0 20px 0;
    color: var(--text);
}

.service-info ul, .process-info ol {
    margin: 0 0 20px 0;
    padding-left: 20px;
}

.service-info li, .process-info li {
    margin-bottom: 8px;
    color: var(--text-light);
    line-height: 1.6;
}

.service-disclaimer {
    font-style: italic;
    color: var(--muted);
    font-size: 0.95rem;
    margin: 16px 0 0 0;
}

.payment-security {
    background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
    border: 1px solid #0ea5e9;
    border-radius: var(--radius);
    padding: 20px;
    margin: 24px 0;
}

.payment-security p {
    margin: 0;
    color: #0c4a6e;
    font-weight: 500;
    text-align: center;
}

.payment-main {
    background: var(--surface);
    color: var(--text);
    padding: 32px 24px;
    border-radius: var(--radius);
    text-align: left;
    margin: 24px 0;
    box-shadow: none;
    border: 1px solid var(--border);
}

.payment-main h2 {
    font-size: 2.5rem;
    font-weight: 700;
    margin: 0 0 16px 0;
}

.payment-main p {
    font-size: 1.1rem;
    margin: 0 0 32px 0;
    opacity: 0.9;
}

.free-payment {
    max-width: 400px;
    margin: 0 auto 32px auto;
}

.amount-input {
    margin-bottom: 20px;
}

.amount-input label {
    display: block;
    font-weight: 600;
    margin-bottom: 8px;
    color: var(--text);
}

.amount-input input {
    width: 100%;
    padding: 14px;
    border: 1px solid var(--border);
    border-radius: var(--radius);
    font-size: 1rem;
    background: #fff;
    color: var(--text);
}

.amount-input input::placeholder {
    color: rgba(255, 255, 255, 0.7);
}

.amount-input input:focus {
    outline: none;
    border-color: var(--accent-light);
    box-shadow: 0 0 0 3px rgba(165, 180, 252, 0.25);
}

.input-help {
    display: block;
    color: var(--muted);
    font-size: 0.85rem;
    margin-top: 6px;
}

.btn-large {
    font-size: 1.05rem;
    padding: 14px 20px;
    background: var(--accent);
    color: #fff;
    font-weight: 700;
    border: none;
    border-radius: var(--radius);
    cursor: pointer;
    transition: var(--transition);
}

.btn-large:hover {
    background: var(--accent-dark);
    transform: translateY(-2px);
}

.service-reference {
    background: transparent;
    padding: 0;
    border: 0;
    margin: 24px 0;
    max-width: 100%;
}

.service-reference h3 {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0 0 20px 0;
    color: var(--text);
    text-align: left;
}

.service-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: grid;
    gap: 12px;
}

.service-list li {
    padding: 12px 0;
    background: transparent;
    border-radius: 0;
    border: 0;
    font-size: 1.1rem;
    color: var(--text-light);
    display: grid;
    grid-template-columns: 1fr;
    gap: 8px;
}

.service-list li:hover { transform: none; }

.service-list strong {
    color: var(--text);
    font-weight: 600;
}

/* Прайс-лист без «карточек» */
.price-list li{ border-bottom: 1px solid var(--border); display:grid; grid-template-columns: 1fr auto; column-gap:12px; align-items: baseline; }
.price-list li:last-child{ border-bottom: 0; }
.price-list .label{ color: var(--text); font-weight: 600; position: relative; }
.price-list .price{ color: var(--text); font-weight: 600; justify-self: end; }
.price-list .label::after{ content: ""; }

.btn { 
    display: inline-flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, var(--accent) 0%, var(--accent-dark) 100%); 
    color: #fff; 
    text-decoration: none; 
    padding: 14px 28px; 
    border-radius: var(--radius); 
    font-weight: 600;
    font-size: 1rem;
    transition: var(--transition);
    box-shadow: var(--shadow);
    border: none;
    cursor: pointer;
}

.btn:hover { 
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
    background: linear-gradient(135deg, var(--accent-dark) 0%, var(--accent) 100%);
}

.free { 
    display: flex; 
    gap: 16px; 
    align-items: flex-end; 
    margin: 24px 0 32px; 
    max-width: 500px;
}

.free input { 
    padding: 14px 16px; 
    border: 2px solid var(--border); 
    border-radius: var(--radius); 
    font-size: 1rem;
    transition: var(--transition);
    flex: 1;
}

.free input:focus {
    outline: none;
    border-color: var(--accent);
    box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
}

.muted { 
    color: var(--muted); 
    font-size: 0.95rem;
    line-height: 1.6;
}

.quick-payments { 
    margin: 24px 0 0; 
    padding: 16px 0 0;
    background: transparent;
    border-radius: 0;
    border-top: 1px solid var(--border);
}

.quick-payments h3 {
    margin: 0 0 8px 0;
    color: var(--text);
    font-size: 1.25rem;
    font-weight: 600;
}

.quick-payments-hint {
    margin: 0 0 16px 0;
    color: var(--text-light);
    font-size: 0.9rem;
    font-style: italic;
}

.quick-buttons { 
    display: flex; 
    gap: 12px; 
    flex-wrap: wrap; 
    margin: 16px 0 0 0; 
}

.btn-quick { 
    background: #F3F2EF; 
    color: var(--text); 
    border: 1px solid #E7E4DE; 
    padding: 10px 14px; 
    border-radius: var(--radius-sm); 
    cursor: pointer; 
    font-weight: 500;
    transition: var(--transition);
}

.btn-quick:hover { 
    background: var(--accent); 
    color: #fff; 
    border-color: var(--accent);
    transform: translateY(-1px);
}

.btn-quick.active {
    background: var(--accent);
    color: #fff;
    border-color: var(--accent);
    font-weight: 600;
}

.payment-notice {
    background: linear-gradient(135deg, #e0f2fe 0%, #f0f9ff 100%);
    border: 1px solid #0ea5e9;
    border-radius: var(--radius);
    padding: 20px;
    margin: 24px 0;
}

.payment-notice p {
    margin: 0;
    color: #0c4a6e;
    font-weight: 500;
}

.payment-notice a {
    color: #0284c7;
    text-decoration: none;
    font-weight: 600;
}

.payment-notice a:hover {
    text-decoration: underline;
}



.consent {
    margin: 12px 0 16px;
    text-align: center;
}
.consent-label {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    color: rgba(255,255,255,0.95);
}
.consent-label a { 
    color: #fff; 
    text-decoration: underline; 
    font-weight: 600;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
}

.consent-label a:hover { 
    color: #f0f9ff; 
    text-decoration: none;
}

/* Mobile Styles */
@media (max-width: 768px) {
    .payment-main {
        padding: 24px 20px;
        margin: 24px 0;
        text-align: left;
    }
    
    .payment-main h2 {
        font-size: 2rem;
    }
    
    .payment-main p {
        font-size: 1rem;
    }
    
    .free-payment {
        margin-bottom: 24px;
    }
    
    .amount-input input {
        padding: 16px;
        font-size: 1rem;
        min-height: 48px;
        touch-action: manipulation;
    }
    
    .btn-large {
        font-size: 1.1rem;
        padding: 16px 28px;
        min-height: 48px;
        touch-action: manipulation;
    }
    
    .quick-payments {
        margin: 24px 0;
        padding: 20px;
    }
    
    .quick-buttons {
        gap: 8px;
        display: grid;
        grid-template-columns: repeat(2, 1fr);
    }
    
    .btn-quick {
        padding: 12px 16px;
        font-size: 0.95rem;
        min-height: 48px;
        touch-action: manipulation;
        width: 100%;
    }
    
    .service-reference {
        padding: 16px;
        margin: 12px 0;
    }
    
    .service-list li {
        padding: 12px 16px;
        font-size: 1rem;
    }
}
</style>

<script>
// Импортируем конфигурацию платежей
import { getPaymentConfig } from '../config/payment.js';

// Получаем конфигурацию для тестового окружения
const paymentConfig = getPaymentConfig('test');

async function handlePaymentSubmit(event: Event) {
    console.log('🚀 Начинаем обработку платежа...');
    event.preventDefault();
    const amountInput = document.getElementById('amount-input') as HTMLInputElement;
    const amount = amountInput?.value;
    
    console.log('💰 Сумма (строка):', amount);
    console.log('💰 Сумма (число):', parseFloat(amount));
    
    if (!amount || parseFloat(amount) < 1) {
        alert('Пожалуйста, введите корректную сумму');
        return;
    }
    
    // Получаем параметры из URL
    const urlParams = new URLSearchParams(window.location.search);
    const successUrl = urlParams.get('success_url') || `${window.location.origin}/thanks/`;
    const cancelUrl = urlParams.get('cancel_url') || `${window.location.origin}?status=cancel`;
    const returnUrl = urlParams.get('return_url') || successUrl;
    
    // Генерируем уникальный номер заказа
    const orderId = 'ORDER_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    console.log('🆔 Номер заказа:', orderId);
    
    // Регистрируем заказ через наш серверный endpoint
    console.log('📡 Отправляем запрос к API...');
    
    const requestData = {
        amount: parseFloat(amount),
        orderNumber: orderId
    };
    
    console.log('📤 Данные для отправки:', requestData);
    console.log('📤 JSON строка:', JSON.stringify(requestData));
    
    try {
        const response = await fetch('/api/register-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestData)
        });
        
        console.log('📨 Получен ответ от сервера:', response.status);
        
        let data;
        try {
            data = await response.json(); // сервер обязан отдать JSON даже при ошибке
        } catch (e) {
            throw new Error(`Bad JSON from server, status ${response.status}`);
        }

        if (!response.ok || !data?.success) {
            throw new Error(data?.error || `HTTP ${response.status}`);
        }

        console.log('✅ Успешно! Редиректим на:', data.formUrl);
        // Редирект на платежную страницу
        window.location.href = data.formUrl;
        
    } catch (error) {
        console.error('💥 Ошибка:', error);
        alert(`Ошибка: ${error instanceof Error ? error.message : 'Неизвестная ошибка'}`);
    }
}

document.addEventListener('DOMContentLoaded', function() {
    const amountInput = document.getElementById('amount-input') as HTMLInputElement;
    const quickButtons = document.querySelectorAll('.btn-quick');
    const paymentForm = document.getElementById('payment-form') as HTMLFormElement;
    
    // Добавляем обработчик формы
    if (paymentForm) {
        paymentForm.addEventListener('submit', handlePaymentSubmit);
    }
    
    // Получаем сумму из URL параметров
    const urlParams = new URLSearchParams(window.location.search);
    const amountFromUrl = urlParams.get('amount');
    
    if (amountFromUrl && amountInput) {
        (amountInput as HTMLInputElement).value = amountFromUrl;
    }
    
    quickButtons.forEach(button => {
        button.addEventListener('click', function(this: HTMLElement) {
            const amount = this.dataset.amount;
            if (amountInput && amount) {
                (amountInput as HTMLInputElement).value = amount;
            }
            
            // Подсветка активной кнопки
            quickButtons.forEach((btn: Element) => btn.classList.remove('active'));
            this.classList.add('active');
        });
    });
});
</script>

